[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = {n = '<Plug>'}
hook_add = '''
nmap <silent> <Leader>r <Plug>(quickrun)
let g:quickrun_config = {}
let g:quickrun_config.javascript = {}
let g:quickrun_config.javascript.type ='javascript/nodejs'
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_map = '<C-e>'
hook_source = '''
source ~/.vim/rc/plugins/ref.rc.vim
'''

[[plugins]]
repo = 'junegunn/fzf'
on_cmd = ['FZF','fzf#run']

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_cmd = ['Fzf','fzf#run']
hook_add = '''
let g:fzf_layout = { 'down': '~30%' }
let g:fzf_command_prefix = 'Fzf'
command! FzfFiles2 call fzf#run({
  \  'source' : 'ag --hidden --ignore .git --ignore node_modules --ignore vendor/bundle -g .',
  \  'dir'    : '.',
  \  'sink'   : 'e',
  \  'options': '-m -x +s',
  \  'down'   : '30%'})
command! -bang -nargs=? -complete=dir FzfFiles3 call
  \ fzf#vim#files(<q-args>, fzf#vim#with_preview({'source': 'ag --hidden --ignore .git -g "" | sort -r'}), <bang>0)
command! FzfGitFiles2 call fzf#run({
  \  'source' : 'ag --hidden --ignore .git --ignore node_modules --ignore vendor/bundle -g .',
  \  'dir'    : systemlist('git rev-parse --show-toplevel 2>/dev/null|| pwd')[0],
  \  'sink'   : 'e',
  \  'options': '-m -x +s',
  \  'down'   : '30%'})
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
nnoremap <silent><C-f>a :<C-u>FzfFiles3<CR>
nnoremap <silent><C-f>m :<C-u>FzfHistory<CR>
nnoremap <silent><C-f>f :<C-u>FzfGFiles<CR>
nnoremap <silent><C-f>d :<C-u>FzfGFiles?<CR>
nnoremap <silent><C-f>b :<C-u>FzfBuffers<CR>
'''

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = ['go']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'


[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript.jsx', 'typescript.tsx']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript.jsx', 'typescript.tsx']

# colorschemes
# [[plugins]]
# repo = 'flazz/vim-colorschemes'
# on_event = ['VimEnter']
# hook_post_source = '''
# set background=dark
# " let g:solarized_termcolors=256
# " colorscheme solarized8_flat
# " colorscheme iceberg
# " colorscheme onedark
# " colorscheme deus
# " colorscheme seoul256
# " colorscheme hybrid
# " colorscheme nightsky
# " colorscheme nightshade_print
# " colorscheme PaperColor
# '''
[[plugins]]
repo = 'rafi/awesome-vim-colorschemes'
on_event = ['VimEnter']
hook_post_source = '''
set background=dark
" let g:solarized_termcolors=256
" colorscheme solarized8_flat
" colorscheme iceberg
" colorscheme onedark
colorscheme challenger_deep
" colorscheme deus
" colorscheme seoul256
'''

[[plugins]]
repo = 'luochen1990/rainbow'
on_event = ['VimEnter']
hook_add='''
let g:rainbow_active = 1
'''
hook_post_source = '''
au MyAutoCmd VimEnter * nested RainbowToggleOn
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
source ~/.vim/rc/plugins/neosnippet.rc.vim
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_event = ['VimEnter']
hook_post_source = '''
vmap E <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_event = ['VimEnter']
hook_post_source = '''
let g:tcommentMapLeader1 = ''
let g:tcommentMapLeader2 = ''
nnoremap <silent> __ :TComment<CR>
vnoremap <silent> __ :TComment<CR>
nmap <silent> gc <Plug>TComment-gc
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'mkd']
hook_add='''
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_fenced_languages = ['tsx=typescriptreact']
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'mkd']
build = 'cd app & yarn install'
hook_add = '''
let g:mkdp_auto_close = 0
let g:mkdp_open_to_the_world = 1
'''
# let g:mkdp_open_to_the_world = 1
# let g:mkdp_open_ip = '192.168.11.13'
# let g:mkdp_port = 8080
# function! g:EchoUrl(url)
#   :echo a:url
# endfunction
# let g:mkdp_browserfunc = 'g:EchoUrl'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
set hidden
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript', 'ts', 'tsx', 'typescript.tsx']
hook_add = '''
autocmd BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
'''

[[plugins]]
repo = 'styled-components/vim-styled-components'
on_ft = ['typescript', 'ts', 'tsx', 'typescript.tsx']
hook_add = '''
'''

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kt', 'kotlin']

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']
hook_add = '''
let g:rustfmt_autosave = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)
'''

[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = ['go']
hook_add = '''
'''

[[plugins]]
repo = 'vim-python/python-syntax'
on_ft = ['py', 'python']
hook_add = '''
let g:python_highlight_all=1
" let g:python_highlight_string_format = 1
" let g:python_highlight_builtin_objs  = 1
'''

[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = ['graphql']
hook_add = '''
'''
