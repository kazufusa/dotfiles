[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = {n = '<Plug>'}
hook_add = '''
nmap <silent> <Leader>r <Plug>(quickrun)
let g:quickrun_config = {}
let g:quickrun_config.javascript = {}
let g:quickrun_config.javascript.type ='javascript/nodejs'
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_map = '<C-e>'
hook_source = '''
source ~/.vim/rc/plugins/ref.rc.vim
'''

[[plugins]]
repo = 'junegunn/fzf'
on_cmd = ['FZF','fzf#run']

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_cmd = ['Fzf','fzf#run']
hook_add = '''
let g:fzf_layout = { 'down': '~30%' }
let g:fzf_command_prefix = 'Fzf'
command! FzfFiles2 call fzf#run({
  \  'source' : 'ag --hidden --ignore .git --ignore node_modules --ignore vendor/bundle -g .',
  \  'dir'    : '.',
  \  'sink'   : 'e',
  \  'options': '-m -x +s',
  \  'down'   : '30%'})
command! FzfGitFiles2 call fzf#run({
  \  'source' : 'ag --hidden --ignore .git --ignore node_modules --ignore vendor/bundle -g .',
  \  'dir'    : systemlist('git rev-parse --show-toplevel 2>/dev/null|| pwd')[0],
  \  'sink'   : 'e',
  \  'options': '-m -x +s',
  \  'down'   : '30%'})
nnoremap <silent><C-f>a :<C-u>FzfFiles2<CR>
nnoremap <silent><C-f>m :<C-u>FzfHistory<CR>
nnoremap <silent><C-f>f :<C-u>FzfGitFiles2<CR>
nnoremap <silent><C-f>b :<C-u>FzfBuffers<CR>
'''

[[plugins]]
repo='mattn/vim-goimports'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'


[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = 'javascript'

[[plugins]]
# repo = 'altercation/vim-colors-solarized'
# repo = 'w0ng/vim-hybrid'
repo = 'itchyny/landscape.vim'
on_event = ['VimEnter']
hook_post_source = '''
colorscheme landscape
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
source ~/.vim/rc/plugins/neosnippet.rc.vim
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_event = ['VimEnter']
hook_post_source = '''
vmap E <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_event = ['VimEnter']
hook_post_source = '''
let g:tcommentMapLeader1 = ''
let g:tcommentMapLeader2 = ''
nnoremap <silent> __ :TComment<CR>
vnoremap <silent> __ :TComment<CR>
nmap <silent> gc <Plug>TComment-gc
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'mkd']
hook_add='''
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'mkd']
build = 'cd app & yarn install'
hook_add = '''
let g:mkdp_auto_close = 0
'''

[[plugins]]
repo = 'scrooloose/syntastic'
on_ft = ['javascript', 'ruby', 'c', 'rust']
hook_add = '''
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let s:eslint_path = system('PATH=$(npm bin):$PATH && which eslint')
let b:syntastic_javascript_eslint_exec = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
let g:syntastic_javascript_checkers=['eslint']

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_rust_rustc_exe = 'cargo check'
let g:syntastic_rust_rustc_fname = ''
let g:syntastic_rust_checkers = ['rustc']
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
set hidden
'''
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript', 'ts', 'tsx']


[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kt', 'kotlin']

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']
hook_add = '''
let g:rustfmt_autosave = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)
'''

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kotlin', 'kt']
