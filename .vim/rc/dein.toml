[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# Operators
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
#on_map = '<Plug>'
hook_add = 'xmap p <Plug>(operator-replace)'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
#on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = 'let g:deoplete#enable_at_startup = 1'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']

[[plugins]]
repo = 'Shougo/dein.vim'

# vim8用
[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

# vim8用
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
depends = ['deoplete.nvim']
build = 'bash install.sh'
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
      \ 'cpp': ['clangd-7'],
      \ 'go': ['gopls'],
      \ 'python': ['pyls'],
      \ 'typescript': ['typescript-language-server', '--stdio'],
      \ 'typescript.tsx': ['typescript-language-server', '--stdio'],
      \ }
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_hasSnippetSupport = 1

set completefunc=LanguageClient#complete

nnoremap K  :call LanguageClient#textDocument_hover()<CR>
nnoremap gd :call LanguageClient#textDocument_definition()<CR>

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
nnoremap F :call LanguageClient#textDocument_formatting()<CR>

autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting()
autocmd BufWritePre *.py :call LanguageClient#textDocument_formatting()
autocmd BufWritePre *.ts :call LanguageClient#textDocument_formatting()
autocmd BufWritePre *.tsx :call LanguageClient#textDocument_formatting()
'''
