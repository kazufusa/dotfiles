"-------------------------------------------------------------------------------
" Plugin settings
" using NeoBundle
"-------------------------------------------------------------------------------

" neobundle & vimproc {{{
let s:noplugin = 0
let s:bundle_root = expand('~/.vim/bundle')
let s:neobundle_root = s:bundle_root . '/neobundle.vim/'

if !isdirectory(s:neobundle_root) || v:version < 702
    " NeoBundleが存在しない、もしくはVimのバージョンが古い場合はプラグインを一切
    " 読み込まない
    let s:noplugin = 1
else
    " NeoBundleを'runtimepath'に追加し初期化を行う
    if has('vim_starting')
        execute "set runtimepath+=" . s:neobundle_root
    endif
    call neobundle#rc(s:bundle_root)

    " NeoBundle自身をNeoBundleで管理させる
    NeoBundleFetch 'Shougo/neobundle.vim'

    " 非同期通信を可能にする
    " 'build'が指定されているのでインストール時に自動的に
    " 指定されたコマンドが実行され vimproc がコンパイルされる
    NeoBundle "Shougo/vimproc", {
        \ "build": {
        \   "windows"   : "make -f make_mingw32.mak",
        \   "cygwin"    : "make -f make_cygwin.mak",
        \   "mac"       : "make -f make_mac.mak",
        \   "unix"      : "make -f make_unix.mak",
        \ }}
endif
" }}}

" Shougo/unite {{{
NeoBundleLazy "Shougo/unite.vim", {
      \ "autoload": {
      \   "commands": ["Unite", "UniteWithBufferDir"]
      \ }}
NeoBundleLazy 'h1mesuke/unite-outline', {
      \ "autoload": {
      \   "unite_sources": ["outline"],
      \ }}
nnoremap [unite] <Nop>
nmap U [unite]
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]r :<C-u>Unite register<CR>
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
nnoremap <silent> [unite]o :<C-u>Unite outline<CR>
nnoremap <silent> [unite]t :<C-u>Unite tab<CR>
nnoremap <silent> [unite]w :<C-u>Unite window<CR>
let s:hooks = neobundle#get_hooks("unite.vim")
function! s:hooks.on_source(bundle)
  " start unite in insert mode
  let g:unite_enable_start_insert = 1
  " use vimfiler to open directory
  call unite#custom_default_action("source/bookmark/directory", "vimfiler")
  call unite#custom_default_action("directory", "vimfiler")
  call unite#custom_default_action("directory_mru", "vimfiler")
  autocmd MyAutoCmd FileType unite call s:unite_settings()
  function! s:unite_settings()
    imap <buffer> <Esc><Esc> <Plug>(unite_exit)
    nmap <buffer> <Esc> <Plug>(unite_exit)
    nmap <buffer> <C-n> <Plug>(unite_select_next_line)
    nmap <buffer> <C-p> <Plug>(unite_select_previous_line)
  endfunction
endfunction


" old settings unite-vim {{{
" key map {{{
nnoremap <Space>ub :Unite buffer -input=!split<CR>
nnoremap <Space>ufm :Unite file_mru2<CR>
nnoremap <Space><Space>ufm :Unite file_mru<CR>
nnoremap <Space>udm :Unite directory_mru<CR>
nnoremap <Space>urm :UniteResume<CR>
nnoremap <Space>uff :Unite file<CR>
nnoremap <Space>uol :Unite outline<CR>
nnoremap <Space>unb :Unite neobundle<CR>
nnoremap <Space>ugr :Unite grep<CR><CR>
nnoremap <Space>um :Unite menu<CR>
nnoremap <Space>urrr :Unite rofi<CR>
nnoremap <Space>url :Unite reanimate -default-action=reanimate_load<CR>
nnoremap <Space>urs :Unite reanimate -default-action=reanimate_save<CR>
nnoremap <Space>umes :Unite output:mes<CR>
nnoremap <Space>uqh :Unite qfixhowm:nocache<CR>
nnoremap <Space>ubb :Unite boost-online-doc -default-action=ref_lynx_tabnew<CR>
 " nnoremap <Space>ub :Unite bookmark<CR>
 " nnoremap <Space>ucmd :Unite commandsCR>
 " nnoremap <Space>uw :Unite window<CR>
 " nnoremap <Space>ut :Unite tab<CR>
inoremap <C-y> <esc>:Unite history/yank -direction=belowright -winheight=12<CR>
" }}}

" settings {{{
let g:unite_data_directory = $VIMLOCALUSER."~/.vim/.unite"
let g:unite_source_history_yank_enable=1

" file mru の保存数
let g:unite_source_file_mru_limit = 5000
let g:unite_source_file_mru2_limit = 200

" default action
call unite#custom_default_action('directory' , 'tabvimfiler')
call unite#custom_default_action("directory_mru", "vimfiler")
let g:vimfiler_as_default_explorer = 1
" }}}

" }}}

" }}}

" quickrun {{{
NeoBundleLazy "thinca/vim-quickrun", {
      \ "autoload": {
      \   "mappings": [['nxo', '<Plug>(quickrun)']]
      \ }}
nmap <Leader>r <Plug>(quickrun)
let s:hooks = neobundle#get_hooks("vim-quickrun")
function! s:hooks.on_source(bundle)
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter/buffer/split" : ":botright",
    \       "outputter/buffer/close_on_empty" : 1
    \   },
    \}
    let g:quickrun_config['_']['runner'] = 'vimproc'
    let g:quickrun_config['_']['runner/vimproc/updatetime'] = 100
    " <C-c> で実行を強制終了させる
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
endfunction
" }}}

" vimfiler {{{
NeoBundleLazy "Shougo/vimfiler", {
      \ "depends": ["Shougo/unite.vim"],
      \ "autoload": {
      \   "commands": ["VimFilerTab", "VimFiler", "VimFilerExplorer"],
      \   "mappings": ['<Plug>(vimfiler_switch)'],
      \   "explorer": 1,
      \ }}
nnoremap <Leader>e :VimFilerExplorer<CR>
" close vimfiler automatically when there are only vimfiler open
autocmd MyAutoCmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
let s:hooks = neobundle#get_hooks("vimfiler")
function! s:hooks.on_source(bundle)
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_enable_auto_cd = 1
  
  " .から始まるファイルおよび.pycで終わるファイルを不可視パターンに
  " 2013-08-14 追記
  let g:vimfiler_ignore_pattern = "\%(^\..*\|\.pyc$\)"

  " vimfiler specific key mappings
  autocmd MyAutoCmd FileType vimfiler call s:vimfiler_settings()
  function! s:vimfiler_settings()
    " ^^ to go up
    nmap <buffer> ^^ <Plug>(vimfiler_switch_to_parent_directory)
    " use R to refresh
    nmap <buffer> R <Plug>(vimfiler_redraw_screen)
    " overwrite C-l
    nmap <buffer> <C-l> <C-w>l
  endfunction
endfunction
" }}}

" colorscheme {{{
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'vim-scripts/twilight'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-scripts/Wombat'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-scripts/rdark'
syntax enable
set background=dark
let g:solarized_termcolors=256
colorscheme solarized
" }}}

" neocomlcache {{{
NeoBundleLazy 'Shougo/neocomplcache.vim', {
    \ "autoload": {"insert": 1}}
let s:hooks = neobundle#get_hooks("neocomplcache.vim")
" neocomplete用の設定関数を定義。下記関数はneocompleteロード時に実行される
function! s:hooks.on_source(bundle)
    let g:neocomplcache_enable_at_startup=1
    let g:neocomplcache_auto_completion_start_length=2
    let g:neocomplcache_enable_ignore_case=0
    let g:neocomplcache_enable_smart_case=0
    let g:neocomplcache_enable_camel_case_completion=1
    let g:neocomplcache_enable_underbar_completion=1

    inoremap <expr><S-TAB> pumvisible() ? "\<Up>" : "\<S-TAB>"

    " Plugin key-mappings for snippets.
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
    imap <expr><TAB> pumvisible() ?
    \ "\<C-n>" : neosnippet#jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

"    " For snippet_complete marker.
"    if has('conceal')
"      set conceallevel=2 concealcursor=i
"    endif

"    "<CR>（ENTER）で候補を閉じ改行
"    inoremap <expr><CR> neocomplcache#close_popup() . "\<CR>"
"    "1つ前の補完を取り消す
"    inoremap <expr><C-g> neocomplcache#undo_completion()
"    "<C-h>や<BS>を押したときに確実にポップアップを削除す
"    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
"    "現在選択している候補を確定する
"    inoremap <expr><C-y> neocomplcache#close_popup()
"    "現在選択している候補をキャンセルし、ポップアップを閉じる
"    inoremap <expr><C-e> neocomplcache#cancel_popup()
"    let g:neocomplcache_enable_cursor_hold_i=0
"    let g:neocomplcache_max_list=1000
    " for clang_complete
    let g:neocomplcache_force_overwrite_completefunc=1
    if !exists("g:neocomplcache_force_omni_patterns")
        let g:neocomplcache_force_omni_patterns = {}
    endif
    let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|::'
endfunction
" }}}

" clang_complete  {{{
"" let g:clang_snippets=1
NeoBundleLazy "Rip-Rip/clang_complete", {'autoload': {'filetypes': ['cpp']}}
let g:clang_complete_auto=0
let g:clang_auto_select=0
"let g:clang_sort_algo="alpha"
let g:clang_sort_algo="priority"
let g:clang_debug=1
let g:clang_user_options = '-std=c++11'
" exec or library use
if OSTYPE == "Darwin\n"
    let g:clang_use_library=1
    let g:clang_debug=1
    let g:clang_library_path="/opt//local/libexec/llvm-3.4/lib/"
elseif OSTYPE == "Linux\n"
    let g:clang_use_library=1
    let g:clang_debug=1
    let g:clang_library_path="/usr/lib/"
elseif has('win32') || has('win64')
endif
" }}}

" Shougo/neosnippet {{{
NeoBundleLazy "Shougo/neosnippet.vim", {
      \ "depends": ["honza/vim-snippets"],
      \ "autoload": {
      \   "insert": 1,
      \ }}
let s:hooks = neobundle#get_hooks("neosnippet.vim")
function! s:hooks.on_source(bundle)
    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)
    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"
    " For snippet_complete marker.
    if has('conceal')
          set conceallevel=2 concealcursor=i
    endif
    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1
    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory=s:bundle_root . '/vim-snippets/snippets'
endfunction
" }}}

" thinca/vim-template {{{
NeoBundle "thinca/vim-template"
" テンプレート中に含まれる特定文字列を置き換える
autocmd MyAutoCmd User plugin-template-loaded call s:template_keywords()
function! s:template_keywords()
    silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
    silent! %s/<+FILENAME+>/\=expand('%:r')/g
endfunction
" テンプレート中に含まれる'<+CURSOR+>'にカーソルを移動
autocmd MyAutoCmd User plugin-template-loaded
    \   if search('<+CURSOR+>')
    \ |   silent! execute 'normal! "_da>'
    \ | endif
" }}}

" vim-indent-guides {{{
NeoBundle "nathanaelkane/vim-indent-guides"
let g:indent_guides_enable_on_vim_startup = 1
" 自動カラーを無効にする
let g:indent_guides_auto_colors=0
" 奇数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#262626 ctermbg=gray
" 偶数インデントのカラー
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#3c3c3c ctermbg=black
" ハイライト色の変化の幅
let g:indent_guides_color_change_percent = 20
" ガイドの幅
let g:indent_guides_guide_size = 1

"}}}

" sjl/gundo {{{
NeoBundleLazy "sjl/gundo.vim", {
      \ "autoload": {
      \   "commands": ['GundoToggle'],
      \}}
nnoremap <Leader>g :GundoToggle<CR>
" }}}

" vim-ref {{{
"webdict reffering site
NeoBundle 'thinca/vim-ref'
let g:ref_open = 'split'
let g:ref_source_webdict_sites = {
\ 'ej': {
\ 'url': 'http://ejje.weblio.jp/content/%s',
\ },
\ 'th': {
\ 'url': 'http://ejje.weblio.jp/english-thesaurus/content/%s',
\ },
\ 'wiki': {
\ 'url': 'http://ja.wikipedia.org/wiki/%s',
\ },
\ }

" default site
let g:ref_source_webdict_sites.default = 'ej'

" output filter
function! g:ref_source_webdict_sites.ej.filter(output)
  return join(split(a:output, "\n")[54 :], "\n")
endfunction
function! g:ref_source_webdict_sites.th.filter(output)
  return join(split(a:output, "\n")[47 :], "\n")
endfunction
function! g:ref_source_webdict_sites.wiki.filter(output)
  return join(split(a:output, "\n")[5 :], "\n")
endfunction

nnoremap <space>re :<C-u>Ref webdict ej<Space>
nnoremap <space>rt :<C-u>Ref webdict th<Space>
nnoremap <space>rw :<C-u>Ref webdict wiki<Space>
" }}}

" python PEP8 checker {{{
NeoBundleLazy 'Flake8-vim' , {'autoload': {'filetypes': ['python']}}
NeoBundleLazy 'hynek/vim-python-pep8-indent', {'autoload': {'filetypes': ['python']}}
let s:hooks = neobundle#get_hooks("Flake8-vim")
function! s:hooks.on_source(bundle)
    "保存時に自動でチェック
    let g:PyFlakeOnWrite = 1
    ""解析種別を設定
    let g:PyFlakeCheckers = 'pep8,mccabe,pyflakes'
    "McCabe複雑度の最大値
    "let g:PyFlakeDefaultComplexity=10
    ""visualモードでQを押すと自動で修正
    let g:PyFlakeRangeCommand = 'Q'
endfunction
" }}}

" vim-pandoc {{{
" for syntax indent
NeoBundleLazy "vim-pandoc/vim-pandoc", {
      \ "autoload": {
      \   "filetypes": ["text", "pandoc", "markdown", "rst", "textile"],
      \ }}
" }}}

" over.vim {{{
NeoBundle 'osyo-manga/vim-over'
"over.vimの起動
nnoremap <silent> <Leader>m :OverCommandLine<CR>
" カーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" コピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>

 " }}}

 " wauto.vim {{{
NeoBundle 'syui/wauto.vim'
let g:auto_write = 1
" }}}

" yankround.vim {{{
NeoBundle 'LeafCage/yankround.vim'
NeoBundle 'kien/ctrlp.vim'
"" キーマップ
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
"" 履歴取得数
let g:yankround_max_history = 50
""履歴一覧(kien/ctrlp.vim)
nnoremap <silent>g<C-p> :<C-u>CtrlPYankRound<CR>
"}}}

NeoBundle 'tpope/vim-surround'

NeoBundleCheck
" ファイルタイププラグインおよびインデントを有効化
" これはNeoBundleによる処理が終了したあとに呼ばなければならない
filetype plugin indent on
